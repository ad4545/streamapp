pipeline {
    agent {
        docker {
            image 'adkumar123/ecom-docker-agent:latest'
            // If you want to run Docker in Docker
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }
    stages {
        stage('Compilation') {
            steps {
                sh 'mvn compile'
            }
            post{
              failure {
                error('Compilation failed. Stopping the build.')
            }
            }
        }
        stage('Test & Build') {
            steps {
                sh 'mvn test && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
          environment {
             SONAR_URL = "http://13.201.5.193:9000"
          }
            steps {
            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
               }
            }
        }
        stage('OWASP Dependency-Check') {
            agent any
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        // Add other stages as needed
    }
}
