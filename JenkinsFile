pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            // If you want to run Docker in Docker
            // args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }
    stages {
        stage('Compilation') {
            steps {
                sh 'mvn compile'
            }
            post{
              failure {
                error('Compilation failed. Stopping the build.')
            }
            }
        }
        stage('Test & Build') {
            steps {
                sh 'mvn test && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
          environment {
             SONAR_URL = "http://13.201.5.193:9000"
          }
            steps {
            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
               }
            }
        }
        // stage('Build and Push Docker Image') {
        //   environment {
        //     DOCKER_IMAGE = "adkumar123/real-time-ad-stream:${BUILD_NUMBER}"
        //     // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        //     REGISTRY_CREDENTIALS = credentials('docker-cred')
        //   }
        //     steps {
        //       script {
        //         sh 'docker build -t ${DOCKER_IMAGE} .'
        //         def dockerImage = docker.image("${DOCKER_IMAGE}")
        //         docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
        //             dockerImage.push()
        //         }
        //     }
        //   }
        // }
         stage('Trivy Scan') {
            steps {
                script {
                    sh 'trivy image --exit-code 1 --severity CRITICAL,HIGH ${DOCKER_IMAGE}'
                }
            }
        }
        // Add other stages as needed
    }
}
